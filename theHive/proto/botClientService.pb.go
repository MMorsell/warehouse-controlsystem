// Code generated by protoc-gen-go. DO NOT EDIT.
// source: theHive/proto/botClientService.proto

package botClientService

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//Point information, for requests and logging of positions
type Point struct {
	RobotId              string   `protobuf:"bytes,1,opt,name=RobotId,proto3" json:"RobotId,omitempty"`
	XPosition            int32    `protobuf:"varint,2,opt,name=XPosition,proto3" json:"XPosition,omitempty"`
	YPosition            int32    `protobuf:"varint,3,opt,name=YPosition,proto3" json:"YPosition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_53edd005e8ff559b, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetRobotId() string {
	if m != nil {
		return m.RobotId
	}
	return ""
}

func (m *Point) GetXPosition() int32 {
	if m != nil {
		return m.XPosition
	}
	return 0
}

func (m *Point) GetYPosition() int32 {
	if m != nil {
		return m.YPosition
	}
	return 0
}

//Conformation message at end of client stream(wall-e) to server(hive)
type MessageRecieved struct {
	Recieved             bool     `protobuf:"varint,1,opt,name=Recieved,proto3" json:"Recieved,omitempty"`
	NumberOfMessages     int32    `protobuf:"varint,2,opt,name=NumberOfMessages,proto3" json:"NumberOfMessages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageRecieved) Reset()         { *m = MessageRecieved{} }
func (m *MessageRecieved) String() string { return proto.CompactTextString(m) }
func (*MessageRecieved) ProtoMessage()    {}
func (*MessageRecieved) Descriptor() ([]byte, []int) {
	return fileDescriptor_53edd005e8ff559b, []int{1}
}

func (m *MessageRecieved) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageRecieved.Unmarshal(m, b)
}
func (m *MessageRecieved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageRecieved.Marshal(b, m, deterministic)
}
func (m *MessageRecieved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRecieved.Merge(m, src)
}
func (m *MessageRecieved) XXX_Size() int {
	return xxx_messageInfo_MessageRecieved.Size(m)
}
func (m *MessageRecieved) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRecieved.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRecieved proto.InternalMessageInfo

func (m *MessageRecieved) GetRecieved() bool {
	if m != nil {
		return m.Recieved
	}
	return false
}

func (m *MessageRecieved) GetNumberOfMessages() int32 {
	if m != nil {
		return m.NumberOfMessages
	}
	return 0
}

//Position of the robot on the grid.
type GridPositions struct {
	RobotId              string   `protobuf:"bytes,1,opt,name=RobotId,proto3" json:"RobotId,omitempty"`
	XPosition            int32    `protobuf:"varint,2,opt,name=XPosition,proto3" json:"XPosition,omitempty"`
	YPosition            int32    `protobuf:"varint,3,opt,name=YPosition,proto3" json:"YPosition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GridPositions) Reset()         { *m = GridPositions{} }
func (m *GridPositions) String() string { return proto.CompactTextString(m) }
func (*GridPositions) ProtoMessage()    {}
func (*GridPositions) Descriptor() ([]byte, []int) {
	return fileDescriptor_53edd005e8ff559b, []int{2}
}

func (m *GridPositions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridPositions.Unmarshal(m, b)
}
func (m *GridPositions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridPositions.Marshal(b, m, deterministic)
}
func (m *GridPositions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridPositions.Merge(m, src)
}
func (m *GridPositions) XXX_Size() int {
	return xxx_messageInfo_GridPositions.Size(m)
}
func (m *GridPositions) XXX_DiscardUnknown() {
	xxx_messageInfo_GridPositions.DiscardUnknown(m)
}

var xxx_messageInfo_GridPositions proto.InternalMessageInfo

func (m *GridPositions) GetRobotId() string {
	if m != nil {
		return m.RobotId
	}
	return ""
}

func (m *GridPositions) GetXPosition() int32 {
	if m != nil {
		return m.XPosition
	}
	return 0
}

func (m *GridPositions) GetYPosition() int32 {
	if m != nil {
		return m.YPosition
	}
	return 0
}

//Payload to be sent to the hive when a robot is first online
type RegisterRobotPayload struct {
	XPosition            int32    `protobuf:"varint,1,opt,name=XPosition,proto3" json:"XPosition,omitempty"`
	YPosition            int32    `protobuf:"varint,2,opt,name=YPosition,proto3" json:"YPosition,omitempty"`
	RobotEndpointAddress string   `protobuf:"bytes,3,opt,name=RobotEndpointAddress,proto3" json:"RobotEndpointAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRobotPayload) Reset()         { *m = RegisterRobotPayload{} }
func (m *RegisterRobotPayload) String() string { return proto.CompactTextString(m) }
func (*RegisterRobotPayload) ProtoMessage()    {}
func (*RegisterRobotPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_53edd005e8ff559b, []int{3}
}

func (m *RegisterRobotPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRobotPayload.Unmarshal(m, b)
}
func (m *RegisterRobotPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRobotPayload.Marshal(b, m, deterministic)
}
func (m *RegisterRobotPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRobotPayload.Merge(m, src)
}
func (m *RegisterRobotPayload) XXX_Size() int {
	return xxx_messageInfo_RegisterRobotPayload.Size(m)
}
func (m *RegisterRobotPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRobotPayload.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRobotPayload proto.InternalMessageInfo

func (m *RegisterRobotPayload) GetXPosition() int32 {
	if m != nil {
		return m.XPosition
	}
	return 0
}

func (m *RegisterRobotPayload) GetYPosition() int32 {
	if m != nil {
		return m.YPosition
	}
	return 0
}

func (m *RegisterRobotPayload) GetRobotEndpointAddress() string {
	if m != nil {
		return m.RobotEndpointAddress
	}
	return ""
}

//Payload returned if robot registration was successful
type RobotRegistrationSuccess struct {
	RobotId              string   `protobuf:"bytes,1,opt,name=RobotId,proto3" json:"RobotId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotRegistrationSuccess) Reset()         { *m = RobotRegistrationSuccess{} }
func (m *RobotRegistrationSuccess) String() string { return proto.CompactTextString(m) }
func (*RobotRegistrationSuccess) ProtoMessage()    {}
func (*RobotRegistrationSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_53edd005e8ff559b, []int{4}
}

func (m *RobotRegistrationSuccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotRegistrationSuccess.Unmarshal(m, b)
}
func (m *RobotRegistrationSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotRegistrationSuccess.Marshal(b, m, deterministic)
}
func (m *RobotRegistrationSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotRegistrationSuccess.Merge(m, src)
}
func (m *RobotRegistrationSuccess) XXX_Size() int {
	return xxx_messageInfo_RobotRegistrationSuccess.Size(m)
}
func (m *RobotRegistrationSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotRegistrationSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_RobotRegistrationSuccess proto.InternalMessageInfo

func (m *RobotRegistrationSuccess) GetRobotId() string {
	if m != nil {
		return m.RobotId
	}
	return ""
}

func init() {
	proto.RegisterType((*Point)(nil), "main.Point")
	proto.RegisterType((*MessageRecieved)(nil), "main.MessageRecieved")
	proto.RegisterType((*GridPositions)(nil), "main.GridPositions")
	proto.RegisterType((*RegisterRobotPayload)(nil), "main.RegisterRobotPayload")
	proto.RegisterType((*RobotRegistrationSuccess)(nil), "main.RobotRegistrationSuccess")
}

func init() {
	proto.RegisterFile("theHive/proto/botClientService.proto", fileDescriptor_53edd005e8ff559b)
}

var fileDescriptor_53edd005e8ff559b = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xcd, 0x4e, 0x32, 0x31,
	0x14, 0xa5, 0x7c, 0x1f, 0x0a, 0xd7, 0x10, 0x49, 0x83, 0x71, 0x32, 0x31, 0x86, 0x4c, 0x5c, 0x10,
	0x17, 0x43, 0x82, 0xbe, 0x00, 0x10, 0xa3, 0x2e, 0x50, 0x52, 0x36, 0x62, 0xe2, 0x62, 0x7e, 0xae,
	0xd8, 0x04, 0x5a, 0xd2, 0x16, 0x12, 0x5f, 0xc0, 0x27, 0xf1, 0x41, 0xcd, 0x74, 0x7e, 0x8c, 0x03,
	0xb2, 0x73, 0xd7, 0x7b, 0x4e, 0x7b, 0xce, 0xbd, 0xb7, 0x07, 0x2e, 0xcc, 0x1b, 0xde, 0xf1, 0x0d,
	0xf6, 0x56, 0x4a, 0x1a, 0xd9, 0x0b, 0xa5, 0x19, 0x2d, 0x38, 0x0a, 0x33, 0x45, 0xb5, 0xe1, 0x11,
	0xfa, 0x16, 0xa6, 0xff, 0x97, 0x01, 0x17, 0xde, 0x0b, 0xd4, 0x26, 0x92, 0x0b, 0x43, 0x1d, 0x38,
	0x64, 0x32, 0x94, 0xe6, 0x3e, 0x76, 0x48, 0x87, 0x74, 0x1b, 0x2c, 0x2f, 0xe9, 0x19, 0x34, 0x9e,
	0x26, 0x52, 0x73, 0xc3, 0xa5, 0x70, 0xaa, 0x1d, 0xd2, 0xad, 0xb1, 0x6f, 0x20, 0x61, 0x67, 0x05,
	0xfb, 0x2f, 0x65, 0x0b, 0xc0, 0x9b, 0xc1, 0xf1, 0x18, 0xb5, 0x0e, 0xe6, 0xc8, 0x30, 0xe2, 0xb8,
	0xc1, 0x98, 0xba, 0x50, 0xcf, 0xcf, 0xd6, 0xa9, 0xce, 0x8a, 0x9a, 0x5e, 0x42, 0xeb, 0x61, 0xbd,
	0x0c, 0x51, 0x3d, 0xbe, 0x66, 0xcf, 0x74, 0xe6, 0xb8, 0x85, 0x7b, 0x08, 0xcd, 0x5b, 0xc5, 0xe3,
	0xdc, 0x4a, 0xff, 0xd1, 0x04, 0x1f, 0x04, 0xda, 0x0c, 0xe7, 0x5c, 0x1b, 0x54, 0x56, 0x6f, 0x12,
	0xbc, 0x2f, 0x64, 0x50, 0x12, 0x25, 0x7b, 0x45, 0xab, 0x25, 0x51, 0xda, 0x87, 0xb6, 0xd5, 0xba,
	0x11, 0xf1, 0x2a, 0xd9, 0xfe, 0x20, 0x8e, 0x15, 0x6a, 0x6d, 0xdd, 0x1b, 0x6c, 0x27, 0xe7, 0x5d,
	0x83, 0x63, 0xf1, 0xb4, 0x19, 0x15, 0x24, 0x42, 0xd3, 0x75, 0x14, 0xa1, 0xde, 0x33, 0x7a, 0xff,
	0x93, 0x40, 0x6b, 0x58, 0x0a, 0x00, 0x1d, 0xc0, 0x69, 0x3e, 0xd2, 0x68, 0xad, 0x14, 0x0a, 0x53,
	0x74, 0x76, 0xe4, 0x27, 0xb1, 0xf0, 0x6d, 0x26, 0xdc, 0x93, 0xb4, 0x28, 0xfd, 0xa0, 0x57, 0xe9,
	0x12, 0x3a, 0x86, 0xe6, 0x8f, 0xad, 0x50, 0x37, 0xbd, 0xbb, 0x6b, 0x55, 0xee, 0x79, 0xc6, 0xfd,
	0xd2, 0xbe, 0x57, 0x19, 0xb6, 0x9f, 0xa9, 0xbf, 0x15, 0xd4, 0xf0, 0xc0, 0x26, 0xf5, 0xea, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x00, 0x80, 0x19, 0x77, 0xd1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BotClientServiceClient is the client API for BotClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BotClientServiceClient interface {
	//Streams updates from each robot position on the grid to the hive
	RegisterCurrentPosition(ctx context.Context, opts ...grpc.CallOption) (BotClientService_RegisterCurrentPositionClient, error)
	RegisterRobot(ctx context.Context, in *RegisterRobotPayload, opts ...grpc.CallOption) (*RobotRegistrationSuccess, error)
}

type botClientServiceClient struct {
	cc *grpc.ClientConn
}

func NewBotClientServiceClient(cc *grpc.ClientConn) BotClientServiceClient {
	return &botClientServiceClient{cc}
}

func (c *botClientServiceClient) RegisterCurrentPosition(ctx context.Context, opts ...grpc.CallOption) (BotClientService_RegisterCurrentPositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BotClientService_serviceDesc.Streams[0], "/main.BotClientService/RegisterCurrentPosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &botClientServiceRegisterCurrentPositionClient{stream}
	return x, nil
}

type BotClientService_RegisterCurrentPositionClient interface {
	Send(*Point) error
	CloseAndRecv() (*MessageRecieved, error)
	grpc.ClientStream
}

type botClientServiceRegisterCurrentPositionClient struct {
	grpc.ClientStream
}

func (x *botClientServiceRegisterCurrentPositionClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *botClientServiceRegisterCurrentPositionClient) CloseAndRecv() (*MessageRecieved, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageRecieved)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *botClientServiceClient) RegisterRobot(ctx context.Context, in *RegisterRobotPayload, opts ...grpc.CallOption) (*RobotRegistrationSuccess, error) {
	out := new(RobotRegistrationSuccess)
	err := c.cc.Invoke(ctx, "/main.BotClientService/RegisterRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotClientServiceServer is the server API for BotClientService service.
type BotClientServiceServer interface {
	//Streams updates from each robot position on the grid to the hive
	RegisterCurrentPosition(BotClientService_RegisterCurrentPositionServer) error
	RegisterRobot(context.Context, *RegisterRobotPayload) (*RobotRegistrationSuccess, error)
}

// UnimplementedBotClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBotClientServiceServer struct {
}

func (*UnimplementedBotClientServiceServer) RegisterCurrentPosition(srv BotClientService_RegisterCurrentPositionServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterCurrentPosition not implemented")
}
func (*UnimplementedBotClientServiceServer) RegisterRobot(ctx context.Context, req *RegisterRobotPayload) (*RobotRegistrationSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRobot not implemented")
}

func RegisterBotClientServiceServer(s *grpc.Server, srv BotClientServiceServer) {
	s.RegisterService(&_BotClientService_serviceDesc, srv)
}

func _BotClientService_RegisterCurrentPosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BotClientServiceServer).RegisterCurrentPosition(&botClientServiceRegisterCurrentPositionServer{stream})
}

type BotClientService_RegisterCurrentPositionServer interface {
	SendAndClose(*MessageRecieved) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type botClientServiceRegisterCurrentPositionServer struct {
	grpc.ServerStream
}

func (x *botClientServiceRegisterCurrentPositionServer) SendAndClose(m *MessageRecieved) error {
	return x.ServerStream.SendMsg(m)
}

func (x *botClientServiceRegisterCurrentPositionServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BotClientService_RegisterRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRobotPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotClientServiceServer).RegisterRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BotClientService/RegisterRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotClientServiceServer).RegisterRobot(ctx, req.(*RegisterRobotPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.BotClientService",
	HandlerType: (*BotClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRobot",
			Handler:    _BotClientService_RegisterRobot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterCurrentPosition",
			Handler:       _BotClientService_RegisterCurrentPosition_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "theHive/proto/botClientService.proto",
}
