syntax = "proto3";
package main;
option go_package="./botClientService";


//Point information, for requests and logging of positions
message Point { 
    string RobotId = 1;
    int32 XPosition = 2;
    int32 YPosition = 3;
}

//Conformation message at end of client stream(wall-e) to server(hive)
message MessageRecieved {
    bool Recieved = 1;
    int32 NumberOfMessages = 2;
}

//Position of the robot on the grid. 
message GridPositions {
    string RobotId = 1;
    int32 XPosition = 2;
    int32 YPosition = 3;
    //If position is target or move point
    bool isTargetPoint = 4;
}

//Payload to be sent to the hive when a robot is first online
message RegisterRobotPayload {
    int32 XPosition = 1;
    int32 YPosition = 2;
    string RobotEndpointAddress = 3;
}


//Payload returned if robot registration was successful
message RobotRegistrationSuccess {
    string RobotId = 1;
}

//Service interface for communications between hive-wall-e
service BotClientService {
    //Streams updates from each robot position on the grid to the hive
    rpc RegisterCurrentPosition(stream Point) returns (MessageRecieved) {}
    rpc RegisterRobot(RegisterRobotPayload) returns (RobotRegistrationSuccess) {}
}